<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using MsgPack = global::MessagePack;

[assembly: MsgPack::Internal.GeneratedAssemblyMessagePackResolverAttribute(typeof(<#= CodeAnalysisUtilities.QualifyWithOptionalNamespace(ResolverName, ResolverNamespace) #>), <#= Version.Parse(ThisAssembly.AssemblyFileVersion).Major #>, <#= Version.Parse(ThisAssembly.AssemblyFileVersion).Minor #>)]

<# if (ResolverNamespace.Length > 0) { #>
namespace <#= ResolverNamespace #> {
<# } #>

/// <summary>A MessagePack resolver that uses generated formatters for types in this assembly.</summary>
partial class <#= ResolverName #> : MsgPack::IFormatterResolver
{
	/// <summary>An instance of this resolver that only returns formatters specifically generated for types in this assembly.</summary>
	public static readonly MsgPack::IFormatterResolver Instance = new <#= ResolverName #>();

	private <#= ResolverName #>()
	{
	}

	public MsgPack::Formatters.IMessagePackFormatter<T> GetFormatter<T>()
	{
		return FormatterCache<T>.Formatter;
	}

	private static class FormatterCache<T>
	{
		internal static readonly MsgPack::Formatters.IMessagePackFormatter<T> Formatter;

		static FormatterCache()
		{
			var f = <#= ResolverName #>GetFormatterHelper.GetFormatter(typeof(T));
			if (f != null)
			{
				Formatter = (MsgPack::Formatters.IMessagePackFormatter<T>)f;
			}
		}
	}

	private static class <#= ResolverName #>GetFormatterHelper
	{
<#
   var constructedRegistrations = ConstructedTypeRegistrations.ToArray();
   if (constructedRegistrations.Length > 0) { #>
		private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> closedTypeLookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(<#= constructedRegistrations.Length #>)
		{
<# for(var i = 0; i < constructedRegistrations.Length; i++) { #>
			{ typeof(<#= constructedRegistrations[i].DataType.GetQualifiedName() #>), <#= i #> },
<# } #>
		};
<# }
   var openGenericRegistrations = OpenGenericRegistrations.ToArray();
   if (openGenericRegistrations.Length > 0) { #>
		private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> openTypeLookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(<#= openGenericRegistrations.Length #>)
		{
<# for(var i = 0; i < openGenericRegistrations.Length; i++) { #>
			{ typeof(<#= openGenericRegistrations[i].DataType.GetQualifiedName(genericStyle: GenericParameterStyle.TypeDefinition) #>), <#= i #> },
<# } #>
		};
<# } #>

		internal static object GetFormatter(global::System.Type t)
		{
<# if (constructedRegistrations.Length > 0) { #>
			if (closedTypeLookup.TryGetValue(t, out int closedKey))
			{
				switch (closedKey)
				{
<# for(var i = 0; i < constructedRegistrations.Length; i++) { var x = constructedRegistrations[i]; #>
					case <#= i #>: return <#= x.GetFormatterInstanceForResolver() #>;
<# } #>
					default: return null; // unreachable
				};
			}
<# }

   if (openGenericRegistrations.Length > 0) { #>
			if (t.IsGenericType && openTypeLookup.TryGetValue(t.GetGenericTypeDefinition(), out int openKey))
			{
				switch (openKey)
				{
<#     for(var i = 0; i < openGenericRegistrations.Length; i++) { var x = openGenericRegistrations[i]; #>
					case <#= i #>: return global::System.Activator.CreateInstance(typeof(<#= x.GetFormatterNameForResolver(GenericParameterStyle.TypeDefinition) #>).MakeGenericType(t.GenericTypeArguments));
<#     } #>
					default: return null; // unreachable
				};
			}
<# } #>

			return null;
		}
	}
}

<# if (ResolverNamespace.Length > 0) { #>
}
<# } #>
