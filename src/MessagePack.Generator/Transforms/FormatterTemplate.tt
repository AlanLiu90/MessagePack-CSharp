<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

namespace <#= Namespace #>
{
<# foreach (var objInfo in ObjectSerializationInfos) {
    bool isFormatterResolverNecessary = ShouldUseFormatterResolverHelper.ShouldUseFormatterResolver(objInfo.Members);#>
    public sealed class <#= objInfo.FormatterNameWithoutNameSpace #> : global::MessagePack.Formatters.IMessagePackFormatter<<#= objInfo.FullName #>>
<# foreach (var typeArg in objInfo.GenericTypeParameters.Where(x => x.HasConstraints)) { #>
        where <#= typeArg.Name #> : <#= typeArg.Constraints #>
<# } #>
    {
<# foreach (var item in objInfo.Members) { #>
<# if (item.CustomFormatterTypeName != null) { #>
        private readonly <#= item.CustomFormatterTypeName #> __<#= item.Name #>CustomFormatter__ = new <#= item.CustomFormatterTypeName #>();
<# } #>
<# } #>

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, <#= objInfo.FullName #> value, global::MessagePack.MessagePackSerializerOptions options)
        {
<# if (objInfo.IsClass) { #>
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

<# }

  if (isFormatterResolverNecessary) { #>
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
<# }

 if (objInfo.HasIMessagePackSerializationCallbackReceiver) {
  if (objInfo.NeedsCastOnBefore) { #>
            ((global::MessagePack.IMessagePackSerializationCallbackReceiver)value).OnBeforeSerialize();
<# } else { #>
            value.OnBeforeSerialize();
<# } #>
<# } #>
            writer.WriteArrayHeader(<#= objInfo.MaxKey + 1 #>);
<# for (var i = 0; i <= objInfo.MaxKey; i++) {
  var member = objInfo.GetMember(i);
  if (member == null) { #>
            writer.WriteNil();
<# } else { #>
            <#= member.GetSerializeMethodString() #>;
<# } #>
<# } #>
        }

        public <#= objInfo.FullName #> Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
<# if (objInfo.IsClass) { #>
                return null;
<# } else { #>
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
<# } #>
            }

<# if (objInfo.MaxKey == -1 && !objInfo.HasIMessagePackSerializationCallbackReceiver) { #>
            reader.Skip();
            return new <#= objInfo.GetConstructorString()  #>;
<# } else { #>
            options.Security.DepthStep(ref reader);
<# if (isFormatterResolverNecessary) { #>
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
<# } #>
            var length = reader.ReadArrayHeader();
<# var canOverwrite = objInfo.ConstructorParameters.Length == 0;
 if (canOverwrite) { #>
            var ____result = new <#= objInfo.GetConstructorString()  #>;
<# } else { foreach (var member in objInfo.Members) { #>
            var __<#= member.Name #>__ = default(<#= member.Type #>);
<# } #>
<# } #>

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
<# for (var memberIndex = 0; memberIndex <= objInfo.MaxKey; memberIndex++) {
  var member = objInfo.GetMember(memberIndex);
  if (member == null) { continue; } #>
                    case <#= member.IntKey #>:
<# if (canOverwrite) {
  if (member.IsWritable) { #>
                        ____result.<#= member.Name #> = <#= member.GetDeserializeMethodString() #>;
<# } else { #>
                        <#= member.GetDeserializeMethodString() #>;
<# } #>
<# } else {#>
                        __<#= member.Name #>__ = <#= member.GetDeserializeMethodString() #>;
<# } #>
                        break;
<# } #>
                    default:
                        reader.Skip();
                        break;
                }
            }

<# if (!canOverwrite) { #>
            var ____result = new <#= objInfo.GetConstructorString()  #>;
<# bool memberAssignExists = false;
  for (var memberIndex = 0; memberIndex <= objInfo.MaxKey; memberIndex++) {
  var member = objInfo.GetMember(memberIndex);
  if (member == null || !member.IsWritable || objInfo.ConstructorParameters.Any(p => p.Equals(member))) { continue; }
  memberAssignExists = true;#>
            if (length <= <#= memberIndex #>)
            {
                goto MEMBER_ASSIGNMENT_END;
            }

            ____result.<#= member.Name #> = __<#= member.Name #>__;
<# } #>
<# if (memberAssignExists) { #>

        MEMBER_ASSIGNMENT_END:
<# }
 }

 if (objInfo.HasIMessagePackSerializationCallbackReceiver) {
  if (objInfo.NeedsCastOnAfter) { #>
            ((global::MessagePack.IMessagePackSerializationCallbackReceiver)____result).OnAfterDeserialize();
<# } else { #>
            ____result.OnAfterDeserialize();
<# } #>
<# } #>
            reader.Depth--;
            return ____result;
<# } #>
        }
    }

<# } #>}
