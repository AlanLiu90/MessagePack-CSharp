// Copyright (c) All contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.Text;
using MessagePack.Generator.CodeAnalysis;
using MessagePack.Generator.Transforms;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace MessagePack.Generator;

public partial class MessagePackGenerator
{
    private const string FileHeader = """
// <auto-generated />

#pragma warning disable 618, 612, 414, 168, CS1591, SA1129, SA1309, SA1312, SA1403, SA1649
""";

    /// <summary>
    /// Generates the specialized resolver and formatters for the types that require serialization in a given compilation.
    /// </summary>
    /// <param name="context">Generator context.</param>
    /// <param name="model">The full messagepack object model.</param>
    private static void Generate(IGeneratorContext context, FullModel model)
    {
        AnalyzerOptions options = model.Options;
        StringBuilder sb = new();

        ResolverTemplate resolverTemplate = new(
            options.ResolverNamespace,
            options.FormatterNamespace,
            options.ResolverName,
            model.GenericInfos
                .Where(x => !x.IsOpenGenericType)
                .Cast<IResolverRegisterInfo>()
                .Concat(model.EnumInfos)
                .Concat(model.UnionInfos)
                .Concat(model.ObjectInfos.Where(x => !x.IsOpenGenericType))
                .ToArray());
        AddTransform(resolverTemplate.TransformText(), "GeneratedResolver");

        foreach (EnumSerializationInfo info in model.EnumInfos)
        {
            EnumTemplate transform = new(CodeAnalysisUtilities.QualifyNames(options.FormatterNamespace, info.Namespace), info);
            AddTransform(transform.TransformText(), $"{info.Namespace}.{info.Name}");
        }

        foreach (UnionSerializationInfo info in model.UnionInfos)
        {
            UnionTemplate transform = new(options.FormatterNamespace, info);
            AddTransform(transform.TransformText(), $"Union.{info.Name}");
        }

        foreach (ObjectSerializationInfo info in model.ObjectInfos)
        {
            string formatterNamespace = CodeAnalysisUtilities.QualifyNames(options.FormatterNamespace, info.Namespace);
            IFormatterTemplate transform = info.IsStringKey
                ? new StringKeyFormatterTemplate(formatterNamespace, info)
                : new FormatterTemplate(formatterNamespace, info);
            AddTransform(transform.TransformText(), $"{info.Namespace}.{info.Name}");
        }

        void AddTransform(string transformOutput, string uniqueFileName)
        {
            sb.Clear();
            sb.AppendLine(FileHeader);
            sb.Append(transformOutput);
            context.AddSource($"MessagePack.{uniqueFileName}.g.cs", sb.ToString());
            sb.Clear();
        }
    }
}
